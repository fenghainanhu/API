
MTK平台对于GPIO 库函数的使用接口

新的GPIO采用了设备树模型的方式构建，摒弃了以前的接口,但是设备树的一些内容还是不懂？

gpio:gpio@0{

    pins_cmd_dat{
		
	pins=<PINMUX_GPIO0_FUNC_IDDIC>; //设置gpio模式			
	slew-rate=<0>;  	//设置输入输出---->0:input,1:output
	
	bias-pull-down=<11>;	//设置是上拉还是下拉，如果设置上拉不使能，则不能设置该选项
	（bias-disable）
	

 	output-low;		//设置输出高电平还是低电平--->output-low,output-high
	input-schmitt-enable=<0>;	 	
	
    };

};


#define PINMUX_GPIO1__FUNC_GPIO1 (MTK_PIN_NO(1) | 0)

#define PINMUX_GPIO1__FUNC_EXT_FRAME_SYNC (MTK_PIN_NO(1) | 2)

#define PINMUX_GPIO1__FUNC_CLKM1 (MTK_PIN_NO(1) | 3)

#define PINMUX_GPIO1__FUNC_USB_DRVVBUS (MTK_PIN_NO(1) | 4)

#define PINMUX_GPIO1__FUNC_C2K_EINT1 (MTK_PIN_NO(1) | 5)

#define PINMUX_GPIO1__FUNC_I2S3_BCK (MTK_PIN_NO(1) | 6)


引脚可能配置的一些参数

enum pin_config_param {
	PIN_CONFIG_BIAS_DISABLE,
	PIN_CONFIG_BIAS_HIGH_IMPEDANCE,
	PIN_CONFIG_BIAS_BUS_HOLD,
	PIN_CONFIG_BIAS_PULL_UP,
	PIN_CONFIG_BIAS_PULL_DOWN,
	PIN_CONFIG_BIAS_PULL_PIN_DEFAULT,
	PIN_CONFIG_DRIVE_PUSH_PULL,
	PIN_CONFIG_DRIVE_OPEN_DRAIN,
	PIN_CONFIG_DRIVE_OPEN_SOURCE,
	PIN_CONFIG_DRIVE_STRENGTH,
	PIN_CONFIG_INPUT_ENABLE,
	PIN_CONFIG_INPUT_SCHMITT_ENABLE,
	PIN_CONFIG_INPUT_SCHMITT,
	PIN_CONFIG_INPUT_DEBOUNCE,
	PIN_CONFIG_POWER_SOURCE,
	PIN_CONFIG_SLEW_RATE,
	PIN_CONFIG_LOW_POWER_MODE,
	PIN_CONFIG_OUTPUT,
	PIN_CONFIG_END = 0x7FFF,
};


驱动代码对与引脚的控制

struct pinctrl *pinctrl;    		//定义的引脚
struct pinctrl_state *pins_default;
struct pinctrl_state *pins_cfg;		//选择引脚的模式，是默认还是特殊功能

alspsPltFmDev=get_alsps_platformdev();
pinctrl=devm_pinctrl_get(&alspsPltFmDev->dev);//从设备树节点上获取引脚

//后面的必须和设备树上的节点名字匹配
pins_default=pinctrl_lookup_state(pinctrl,"pin_default");//获取引脚为默认状态

pin_cfg=pinctrl_lookup_state(pinctrl,"pin_cfg");//获取引脚的配置

pinctrl_select_state(pinctrl,pins_cfg);//配置引脚的状态



#include <linux/gpio.h>

//申请gpio引脚资源
static inline int gpio_request(unsigned gpio,const char *label);

//释放gpio资源
static inline void gpio_free(unsigned gpio);

//设置输入模式
static inline int gpio_direction_input(unsigned gpio);

//设置输出，输出多少
static inline int gpio_direction_output(unsigned gpio,int value);

//？
static inline int gpio_set_debounce(unsigned gpio,unsigned debounce);


//获取gpio的值
static inline int gpio_get_value(unsigned gpio);

//设置gpio的值
static inline void gpio_set_value(unsigned gpio,int value);







